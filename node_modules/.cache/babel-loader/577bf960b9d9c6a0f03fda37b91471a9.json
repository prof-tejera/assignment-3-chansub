{"ast":null,"code":"var _jsxFileName = \"/Users/steymourian/Documents/GitHub/personal/assignment-2-chansub/src/context/LocalTime.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport { useInterval } from \"../hooks\";\nimport { AppContext } from \"./ContextProvider\";\nimport DisplayTime from \"../components/generic/DisplayTime.js\";\nimport { convertToMinSec } from \"../utils/helpers\";\nimport Button from \"../components/generic/Button\";\nimport Panel from \"../components/generic/Panel\";\nimport DisplayRounds from \"../components/generic/DisplayRounds\"; // const Timer = ({ duration, rounds, index, type, isHome }) => {\n//   const { activeIndex, paused, setPaused, setActiveIndex, removeItem, queue} = useContext(AppContext);\n//   const [time, setTime] = useState(0);\n//   const active = activeIndex === index; \n//   useInterval(() => {\n//     //if end has reached, reset \n//     if(activeIndex === queue.length){\n//       console.log(\"End reached!\");\n//       setPaused(true);\n//       setActiveIndex(0);\n//       setTime(0);\n//       return;\n//     }\n//     if (paused || !active) return;\n//     if (`${time}` === `${duration}`){\n//         setActiveIndex(index + 1);\n//     } \n//     else {\n//       setTime((c) => c + 1);\n//     }\n//   }, 1000);\n//   function DisplayRoundsTime(){\n//     if(type === 'XY'||(type === 'Tabata')){\n//       return <><DisplayRounds rounds={rounds} /> x <DisplayTime time={convertToMinSec(duration/rounds)} /></>\n//     }\n//     else{\n//       return <><DisplayTime time={convertToMinSec(duration)}/></>\n//     }\n//   }\n//   function DisplayProgress(){\n//     if(!active) return;\n//     if(active && type === 'Countdown'){\n//       return (<span> (Progress: {convertToMinSec(duration-time)})</span>)\n//     }\n//     else if(active && (type==='XY' || type==='Tabata')){\n//       //TODO: why won't this work? Tried to increase myActiveRound based on the progress\n//       let myActiveRound = 1;\n//       // const timePerRound = duration/rounds;\n//       // let timeSoFar = duration-time;  //10\n//       // if((timePerRound*myActiveRound < timeSoFar) && (timeSoFar < duration)){\n//       //    myActiveRound = myActiveRound+1;\n//       // }\n//       return (<span> ({myActiveRound} of {rounds} Progress: {convertToMinSec(time)})</span>)\n//     }\n//     else{\n//       return (<span> (Progress: {convertToMinSec(time)})</span>)\n//     }\n//   }\n//   return (\n//       <Panel id={'q'+index} className={active ? \"yellowBG\" : \"whiteBG\"}>\n//         <Button onClick={() => removeItem(index)} style={{display: (isHome === 'no') ? 'inline-block' : 'none'}} type=\"remove\" text=\"Remove\"/>\n//         {type} - <DisplayRoundsTime/> <DisplayProgress/>\n//       </Panel>\n//   );\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timer = _ref => {\n  _s();\n\n  let {\n    duration,\n    index\n  } = _ref;\n  const {\n    activeIndex,\n    paused,\n    setActiveIndex\n  } = useContext(AppContext);\n  const [time, setTime] = useState(0);\n  const active = activeIndex === index;\n  useInterval(() => {\n    if (paused || !active) return;\n\n    if (time === duration) {\n      setActiveIndex(index + 1);\n    } else {\n      setTime(c => c + 1);\n    }\n  }, 1000);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: active ? \"red\" : \"white\"\n    },\n    children: [\"Local Timer - Duration: \", duration, \" -\", \" \", active && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Progress: \", time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Timer, \"xqSw9mxrRBo2Q2VTBYB2fsRFl2w=\", false, function () {\n  return [useInterval];\n});\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["useContext","useState","useInterval","AppContext","DisplayTime","convertToMinSec","Button","Panel","DisplayRounds","Timer","duration","index","activeIndex","paused","setActiveIndex","time","setTime","active","c","backgroundColor"],"sources":["/Users/steymourian/Documents/GitHub/personal/assignment-2-chansub/src/context/LocalTime.js"],"sourcesContent":["import { useContext, useState } from \"react\";\nimport { useInterval } from \"../hooks\";\nimport { AppContext } from \"./ContextProvider\";\n\nimport DisplayTime  from \"../components/generic/DisplayTime.js\";\nimport { convertToMinSec } from \"../utils/helpers\";\nimport Button from \"../components/generic/Button\";\nimport Panel from \"../components/generic/Panel\";\nimport DisplayRounds from \"../components/generic/DisplayRounds\";\n\n\n// const Timer = ({ duration, rounds, index, type, isHome }) => {\n//   const { activeIndex, paused, setPaused, setActiveIndex, removeItem, queue} = useContext(AppContext);\n//   const [time, setTime] = useState(0);\n//   const active = activeIndex === index; \n\n//   useInterval(() => {\n//     //if end has reached, reset \n//     if(activeIndex === queue.length){\n//       console.log(\"End reached!\");\n//       setPaused(true);\n//       setActiveIndex(0);\n//       setTime(0);\n\n//       return;\n//     }\n    \n//     if (paused || !active) return;\n    \n//     if (`${time}` === `${duration}`){\n//         setActiveIndex(index + 1);\n//     } \n//     else {\n//       setTime((c) => c + 1);\n//     }\n//   }, 1000);\n\n//   function DisplayRoundsTime(){\n//     if(type === 'XY'||(type === 'Tabata')){\n//       return <><DisplayRounds rounds={rounds} /> x <DisplayTime time={convertToMinSec(duration/rounds)} /></>\n//     }\n//     else{\n//       return <><DisplayTime time={convertToMinSec(duration)}/></>\n//     }\n//   }\n\n//   function DisplayProgress(){\n//     if(!active) return;\n\n//     if(active && type === 'Countdown'){\n//       return (<span> (Progress: {convertToMinSec(duration-time)})</span>)\n//     }\n//     else if(active && (type==='XY' || type==='Tabata')){\n \n//       //TODO: why won't this work? Tried to increase myActiveRound based on the progress\n//       let myActiveRound = 1;\n//       // const timePerRound = duration/rounds;\n//       // let timeSoFar = duration-time;  //10\n      \n//       // if((timePerRound*myActiveRound < timeSoFar) && (timeSoFar < duration)){\n//       //    myActiveRound = myActiveRound+1;\n//       // }\n\n//       return (<span> ({myActiveRound} of {rounds} Progress: {convertToMinSec(time)})</span>)\n//     }\n//     else{\n//       return (<span> (Progress: {convertToMinSec(time)})</span>)\n//     }\n//   }\n \n//   return (\n//       <Panel id={'q'+index} className={active ? \"yellowBG\" : \"whiteBG\"}>\n//         <Button onClick={() => removeItem(index)} style={{display: (isHome === 'no') ? 'inline-block' : 'none'}} type=\"remove\" text=\"Remove\"/>\n//         {type} - <DisplayRoundsTime/> <DisplayProgress/>\n//       </Panel>\n//   );\n// };\n\n\n\n\nconst Timer = ({ duration, index }) => {\n  const { activeIndex, paused, setActiveIndex } = useContext(AppContext);\n  const [time, setTime] = useState(0);\n  const active = activeIndex === index;\n\n  useInterval(() => {\n    if (paused || !active) return;\n\n    if (time === duration) {\n      setActiveIndex(index + 1);\n    } else {\n      setTime((c) => c + 1);\n    }\n  }, 1000);\n\n  return (\n    <div\n      style={{\n        backgroundColor: active ? \"red\" : \"white\"\n      }}\n    >\n      Local Timer - Duration: {duration} -{\" \"}\n      {active && <span>Progress: {time}</span>}\n    </div>\n  );\n};\n\nexport default Timer;\n"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA,OAAOC,WAAP,MAAyB,sCAAzB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,aAAP,MAA0B,qCAA1B,C,CAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA,MAAMC,KAAK,GAAG,QAAyB;EAAA;;EAAA,IAAxB;IAAEC,QAAF;IAAYC;EAAZ,CAAwB;EACrC,MAAM;IAAEC,WAAF;IAAeC,MAAf;IAAuBC;EAAvB,IAA0Cd,UAAU,CAACG,UAAD,CAA1D;EACA,MAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,CAAD,CAAhC;EACA,MAAMgB,MAAM,GAAGL,WAAW,KAAKD,KAA/B;EAEAT,WAAW,CAAC,MAAM;IAChB,IAAIW,MAAM,IAAI,CAACI,MAAf,EAAuB;;IAEvB,IAAIF,IAAI,KAAKL,QAAb,EAAuB;MACrBI,cAAc,CAACH,KAAK,GAAG,CAAT,CAAd;IACD,CAFD,MAEO;MACLK,OAAO,CAAEE,CAAD,IAAOA,CAAC,GAAG,CAAZ,CAAP;IACD;EACF,CARU,EAQR,IARQ,CAAX;EAUA,oBACE;IACE,KAAK,EAAE;MACLC,eAAe,EAAEF,MAAM,GAAG,KAAH,GAAW;IAD7B,CADT;IAAA,uCAK2BP,QAL3B,QAKuC,GALvC,EAMGO,MAAM,iBAAI;MAAA,yBAAiBF,IAAjB;IAAA;MAAA;MAAA;MAAA;IAAA,QANb;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAUD,CAzBD;;GAAMN,K;UAKJP,W;;;KALIO,K;AA2BN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}