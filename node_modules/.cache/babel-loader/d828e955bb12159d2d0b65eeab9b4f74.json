{"ast":null,"code":"var _jsxFileName = \"/Users/steymourian/Documents/GitHub/personal/assignment-1-chansub/src/components/timers/Countdown2.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Panel from \"../generic/Panel.js\";\nimport Button from \"../generic/Button.js\"; //I took some inspiration from https://stackoverflow.com/questions/61923862/how-to-pause-a-setinterval-countdown-timer-in-react\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Countdown2 = () => {\n  _s();\n\n  const [secondsLeft, setSecondsLeft] = useState(60);\n  const [elapsed, setElapsed] = useState(60);\n  const [pause, setPause] = useState(true);\n\n  const timer = () => {\n    // setInterval for every second\n    let countdown = setInterval(() => {\n      // if allowed time is used up, clear interval\n      if (secondsLeft < 0) {\n        clearInterval(countdown);\n        return;\n      } // if paused, record elapsed time and return\n\n\n      if (pause === true) {\n        //elapsed = secondsLeft;\n        setElapsed(secondsLeft);\n        return;\n      } // decrement seconds left\n\n\n      secondsLeft--; //displayTimeLeft(secondsLeft)\n    }, 1000);\n  };\n\n  const handlePauseToggle = () => {\n    setPause(!pause);\n    console.log(\"Countdown\", pause ? 'unpaused' : 'paused');\n\n    if (pause === false) {\n      setSecondsLeft(elapsed);\n    }\n  }; //   const displayTimeLeft = (seconds) => {\n  //     document.getElementById(\"time\").textContent = seconds;\n  //   }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Panel, {\n      className: \"output\",\n      children: [\"Seconds: \", secondsLeft]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: pause ? 'btn-start' : 'btn-pause',\n      text: pause ? 'Start' : 'Pause',\n      onClick: handlePauseToggle,\n      disabled: secondsLeft === 0 ? true : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Countdown2, \"gR1mCVgH8d64KBn6FrNtE6rq9L0=\");\n\n_c = Countdown2;\nexport default Countdown2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown2\");","map":{"version":3,"names":["useState","Panel","Button","Countdown2","secondsLeft","setSecondsLeft","elapsed","setElapsed","pause","setPause","timer","countdown","setInterval","clearInterval","handlePauseToggle","console","log"],"sources":["/Users/steymourian/Documents/GitHub/personal/assignment-1-chansub/src/components/timers/Countdown2.js"],"sourcesContent":["import {useState} from \"react\";\nimport Panel from \"../generic/Panel.js\";\nimport Button from \"../generic/Button.js\";\n\n//I took some inspiration from https://stackoverflow.com/questions/61923862/how-to-pause-a-setinterval-countdown-timer-in-react\n\nconst Countdown2 = () => {\n\n    const [secondsLeft, setSecondsLeft] = useState(60);\n    const [elapsed, setElapsed] = useState(60);\n    const [pause, setPause] = useState(true);\n\n    const timer = () => {\n        // setInterval for every second\n        let countdown = setInterval(() => {\n          // if allowed time is used up, clear interval\n          if (secondsLeft < 0) {\n            clearInterval(countdown)\n            return;\n          }\n          // if paused, record elapsed time and return\n          if (pause === true) {\n            //elapsed = secondsLeft;\n            setElapsed(secondsLeft);\n            return;\n          }\n          // decrement seconds left\n          secondsLeft--;\n          //displayTimeLeft(secondsLeft)\n        }, 1000)\n      }\n\n      const handlePauseToggle = () => {\n        setPause(!pause);\n        console.log(\"Countdown\",(pause)?'unpaused':'paused');\n        if(pause === false){\n            setSecondsLeft(elapsed);\n        }\n    }\n\n    //   const displayTimeLeft = (seconds) => {\n    //     document.getElementById(\"time\").textContent = seconds;\n    //   }\n    \n\n\n\n    return (\n        <>\n        <Panel className={\"output\"}>Seconds: {secondsLeft}</Panel>\n        <Button className={(pause)?'btn-start':'btn-pause'} text={(pause)?'Start':'Pause'} onClick={handlePauseToggle} disabled={(secondsLeft === 0)? true:false}/>\n        {/* <Button className='btn-end' text='End' onClick={handleEnd} disabled={(seconds === 0)? true:false}/> \n        <Button className='btn-reset' text='Reset' onClick={handleReset} /> */}\n        </>        \n    );\n};\n\nexport default Countdown2;\n"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB,C,CAEA;;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;EAAA;;EAErB,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;EACA,MAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;;EAEA,MAAMU,KAAK,GAAG,MAAM;IAChB;IACA,IAAIC,SAAS,GAAGC,WAAW,CAAC,MAAM;MAChC;MACA,IAAIR,WAAW,GAAG,CAAlB,EAAqB;QACnBS,aAAa,CAACF,SAAD,CAAb;QACA;MACD,CAL+B,CAMhC;;;MACA,IAAIH,KAAK,KAAK,IAAd,EAAoB;QAClB;QACAD,UAAU,CAACH,WAAD,CAAV;QACA;MACD,CAX+B,CAYhC;;;MACAA,WAAW,GAbqB,CAchC;IACD,CAf0B,EAexB,IAfwB,CAA3B;EAgBD,CAlBH;;EAoBE,MAAMU,iBAAiB,GAAG,MAAM;IAC9BL,QAAQ,CAAC,CAACD,KAAF,CAAR;IACAO,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBR,KAAD,GAAQ,UAAR,GAAmB,QAA3C;;IACA,IAAGA,KAAK,KAAK,KAAb,EAAmB;MACfH,cAAc,CAACC,OAAD,CAAd;IACH;EACJ,CANC,CA1BmB,CAkCrB;EACA;EACA;;;EAKA,oBACI;IAAA,wBACA,QAAC,KAAD;MAAO,SAAS,EAAE,QAAlB;MAAA,wBAAsCF,WAAtC;IAAA;MAAA;MAAA;MAAA;IAAA,QADA,eAEA,QAAC,MAAD;MAAQ,SAAS,EAAGI,KAAD,GAAQ,WAAR,GAAoB,WAAvC;MAAoD,IAAI,EAAGA,KAAD,GAAQ,OAAR,GAAgB,OAA1E;MAAmF,OAAO,EAAEM,iBAA5F;MAA+G,QAAQ,EAAGV,WAAW,KAAK,CAAjB,GAAqB,IAArB,GAA0B;IAAnJ;MAAA;MAAA;MAAA;IAAA,QAFA;EAAA,gBADJ;AAQH,CAjDD;;GAAMD,U;;KAAAA,U;AAmDN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}