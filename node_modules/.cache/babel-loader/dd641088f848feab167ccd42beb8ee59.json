{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\nexport const useInterval = (callback, delay) => {\n  _s();\n\n  const savedCallback = useRef(callback); // Remember the latest callback if it changes.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    // Note: 0 is a valid value for delay.\n    if (!delay && delay !== 0) {\n      return;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}; //Took inspiration from here: https://www.joshwcomeau.com/react/persisting-react-state-in-localstorage/\n\n_s(useInterval, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");\n\nexport const useLocalStorage = (defaultValue, key) => {\n  _s2();\n\n  const [value, setValue] = useState(() => {\n    const stickyValue = window.localStorage.getItem(key);\n    return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\n  });\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n};\n\n_s2(useLocalStorage, \"VHh2k+sC8h9baBG8Xcu+6K2I4fc=\");","map":{"version":3,"names":["useState","useEffect","useRef","useInterval","callback","delay","savedCallback","current","id","setInterval","clearInterval","useLocalStorage","defaultValue","key","value","setValue","stickyValue","window","localStorage","getItem","JSON","parse","setItem","stringify"],"sources":["/Users/steymourian/Documents/GitHub/personal/assignment-3-chansub/src/hooks.js"],"sourcesContent":["import {useState, useEffect, useRef } from \"react\";\n\nexport const useInterval = (callback, delay) => {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest callback if it changes.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    // Note: 0 is a valid value for delay.\n    if (!delay && delay !== 0) {\n      return;\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay);\n\n    return () => clearInterval(id);\n  }, [delay]);\n};\n\n\n//Took inspiration from here: https://www.joshwcomeau.com/react/persisting-react-state-in-localstorage/\nexport const useLocalStorage = (defaultValue, key) => {\n  const [value, setValue] = useState(() => {\n\n    const stickyValue = window.localStorage.getItem(key);\n    \n    return stickyValue !== null\n      ? JSON.parse(stickyValue)\n      : defaultValue;\n  });\n  \n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n\n};\n"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,MAA7B,QAA2C,OAA3C;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;EAAA;;EAC9C,MAAMC,aAAa,GAAGJ,MAAM,CAACE,QAAD,CAA5B,CAD8C,CAG9C;;EACAH,SAAS,CAAC,MAAM;IACdK,aAAa,CAACC,OAAd,GAAwBH,QAAxB;EACD,CAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAJ8C,CAQ9C;;EACAH,SAAS,CAAC,MAAM;IACd;IACA;IACA,IAAI,CAACI,KAAD,IAAUA,KAAK,KAAK,CAAxB,EAA2B;MACzB;IACD;;IAED,MAAMG,EAAE,GAAGC,WAAW,CAAC,MAAMH,aAAa,CAACC,OAAd,EAAP,EAAgCF,KAAhC,CAAtB;IAEA,OAAO,MAAMK,aAAa,CAACF,EAAD,CAA1B;EACD,CAVQ,EAUN,CAACH,KAAD,CAVM,CAAT;AAWD,CApBM,C,CAuBP;;GAvBaF,W;;AAwBb,OAAO,MAAMQ,eAAe,GAAG,CAACC,YAAD,EAAeC,GAAf,KAAuB;EAAA;;EACpD,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,MAAM;IAEvC,MAAMgB,WAAW,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BN,GAA5B,CAApB;IAEA,OAAOG,WAAW,KAAK,IAAhB,GACHI,IAAI,CAACC,KAAL,CAAWL,WAAX,CADG,GAEHJ,YAFJ;EAGD,CAPiC,CAAlC;EASAX,SAAS,CAAC,MAAM;IACdgB,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4BT,GAA5B,EAAiCO,IAAI,CAACG,SAAL,CAAeT,KAAf,CAAjC;EACD,CAFQ,EAEN,CAACD,GAAD,EAAMC,KAAN,CAFM,CAAT;EAGA,OAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AAED,CAfM;;IAAMJ,e"},"metadata":{},"sourceType":"module"}