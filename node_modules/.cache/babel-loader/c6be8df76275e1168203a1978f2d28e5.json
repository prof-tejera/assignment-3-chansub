{"ast":null,"code":"var _jsxFileName = \"/Users/steymourian/Documents/GitHub/personal/assignment-2-chansub/src/components/timers/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Panel from \"../generic/Panel.js\";\nimport Button from \"../generic/Button.js\";\nimport DisplayTime from \"../generic/DisplayTime.js\";\nimport { convertToMinSec } from \"../../utils/helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Countdown = () => {\n  _s();\n\n  const initialSeconds = 150;\n  const [seconds, setSeconds] = useState(initialSeconds);\n  const [pause, setPause] = useState(true);\n  useEffect(() => {\n    const interval = setInterval(performCount, 1000); //1000 millisecond = 1 second\n\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  const performCount = () => {\n    if (!pause) {\n      if (seconds > 0) {\n        setSeconds(seconds - 1);\n      } else if (seconds === 0) {\n        setPause(true);\n        console.log(\"Countdown timer ends!\");\n      }\n    }\n  };\n\n  const handlePauseToggle = () => {\n    setPause(!pause);\n    console.log(\"Countdown\", pause ? 'unpaused' : 'paused');\n  };\n\n  const handleEnd = () => {\n    setPause(true);\n    setSeconds(0);\n    console.log(\"Countdown end called\");\n  };\n\n  const handleReset = () => {\n    setPause(true);\n    setSeconds(initialSeconds);\n    console.log(\"Countdown reset called\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Panel, {\n      className: \"output\",\n      children: /*#__PURE__*/_jsxDEV(DisplayTime, {\n        time: convertToMinSec(seconds)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Panel, {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        className: pause ? 'btn-start' : 'btn-pause',\n        text: pause ? 'Start' : 'Pause',\n        onClick: handlePauseToggle,\n        disabled: seconds === 0 ? true : false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"btn-end\",\n        text: \"End\",\n        onClick: handleEnd,\n        disabled: seconds === 0 || seconds === initialSeconds ? true : false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"btn-reset\",\n        text: \"Reset\",\n        onClick: handleReset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Countdown, \"6Zi9l7SfAXSNYMSUO12JDji2q1s=\");\n\n_c = Countdown;\nexport default Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"names":["useEffect","useState","Panel","Button","DisplayTime","convertToMinSec","Countdown","initialSeconds","seconds","setSeconds","pause","setPause","interval","setInterval","performCount","clearInterval","console","log","handlePauseToggle","handleEnd","handleReset"],"sources":["/Users/steymourian/Documents/GitHub/personal/assignment-2-chansub/src/components/timers/Countdown.js"],"sourcesContent":["import { useEffect, useState} from \"react\";\nimport Panel from \"../generic/Panel.js\";\nimport Button from \"../generic/Button.js\";\nimport DisplayTime  from \"../generic/DisplayTime.js\";\nimport { convertToMinSec } from \"../../utils/helpers\";\n\n\nconst Countdown = () => {\n\n    const initialSeconds = 150;\n\n    const [seconds, setSeconds] = useState(initialSeconds);\n    const [pause, setPause] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(performCount, 1000); //1000 millisecond = 1 second\n        return () => {\n            clearInterval(interval);\n        }\n    });\n\n    const performCount = () => {\n        if(!pause){\n            if(seconds > 0){\n                setSeconds(seconds - 1);\n            }\n            else if(seconds === 0){\n                setPause(true);\n                console.log(\"Countdown timer ends!\");\n            }\n        }\n    }\n\n    const handlePauseToggle = () => {\n        setPause(!pause);\n        console.log(\"Countdown\",(pause)?'unpaused':'paused');\n    }\n    const handleEnd = () => {\n        setPause(true);\n        setSeconds(0);\n        console.log(\"Countdown end called\");\n    }\n    const handleReset = () => {\n        setPause(true);\n        setSeconds(initialSeconds);\n        console.log(\"Countdown reset called\");\n    }\n\n\n    return (\n        <>\n        <Panel className=\"output\">\n            <DisplayTime time={convertToMinSec(seconds)}/>\n        </Panel>\n        <Panel className=\"buttons\">\n            <Button className={(pause)?'btn-start':'btn-pause'} text={(pause)?'Start':'Pause'} onClick={handlePauseToggle} disabled={(seconds === 0)? true:false}/>\n            <Button className='btn-end' text='End' onClick={handleEnd} disabled={(seconds === 0)||(seconds === initialSeconds)? true:false}/> \n            <Button className='btn-reset' text='Reset' onClick={handleReset} />\n        </Panel>\n        </>        \n    );\n};\n\nexport default Countdown;\n"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAmC,OAAnC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,WAAP,MAAyB,2BAAzB;AACA,SAASC,eAAT,QAAgC,qBAAhC;;;;AAGA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EAEpB,MAAMC,cAAc,GAAG,GAAvB;EAEA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAACM,cAAD,CAAtC;EACA,MAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;EAEAD,SAAS,CAAC,MAAM;IACZ,MAAMY,QAAQ,GAAGC,WAAW,CAACC,YAAD,EAAe,IAAf,CAA5B,CADY,CACsC;;IAClD,OAAO,MAAM;MACTC,aAAa,CAACH,QAAD,CAAb;IACH,CAFD;EAGH,CALQ,CAAT;;EAOA,MAAME,YAAY,GAAG,MAAM;IACvB,IAAG,CAACJ,KAAJ,EAAU;MACN,IAAGF,OAAO,GAAG,CAAb,EAAe;QACXC,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;MACH,CAFD,MAGK,IAAGA,OAAO,KAAK,CAAf,EAAiB;QAClBG,QAAQ,CAAC,IAAD,CAAR;QACAK,OAAO,CAACC,GAAR,CAAY,uBAAZ;MACH;IACJ;EACJ,CAVD;;EAYA,MAAMC,iBAAiB,GAAG,MAAM;IAC5BP,QAAQ,CAAC,CAACD,KAAF,CAAR;IACAM,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBP,KAAD,GAAQ,UAAR,GAAmB,QAA3C;EACH,CAHD;;EAIA,MAAMS,SAAS,GAAG,MAAM;IACpBR,QAAQ,CAAC,IAAD,CAAR;IACAF,UAAU,CAAC,CAAD,CAAV;IACAO,OAAO,CAACC,GAAR,CAAY,sBAAZ;EACH,CAJD;;EAKA,MAAMG,WAAW,GAAG,MAAM;IACtBT,QAAQ,CAAC,IAAD,CAAR;IACAF,UAAU,CAACF,cAAD,CAAV;IACAS,OAAO,CAACC,GAAR,CAAY,wBAAZ;EACH,CAJD;;EAOA,oBACI;IAAA,wBACA,QAAC,KAAD;MAAO,SAAS,EAAC,QAAjB;MAAA,uBACI,QAAC,WAAD;QAAa,IAAI,EAAEZ,eAAe,CAACG,OAAD;MAAlC;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADA,eAIA,QAAC,KAAD;MAAO,SAAS,EAAC,SAAjB;MAAA,wBACI,QAAC,MAAD;QAAQ,SAAS,EAAGE,KAAD,GAAQ,WAAR,GAAoB,WAAvC;QAAoD,IAAI,EAAGA,KAAD,GAAQ,OAAR,GAAgB,OAA1E;QAAmF,OAAO,EAAEQ,iBAA5F;QAA+G,QAAQ,EAAGV,OAAO,KAAK,CAAb,GAAiB,IAAjB,GAAsB;MAA/I;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,MAAD;QAAQ,SAAS,EAAC,SAAlB;QAA4B,IAAI,EAAC,KAAjC;QAAuC,OAAO,EAAEW,SAAhD;QAA2D,QAAQ,EAAGX,OAAO,KAAK,CAAb,IAAkBA,OAAO,KAAKD,cAA9B,GAA+C,IAA/C,GAAoD;MAAzH;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI,QAAC,MAAD;QAAQ,SAAS,EAAC,WAAlB;QAA8B,IAAI,EAAC,OAAnC;QAA2C,OAAO,EAAEa;MAApD;QAAA;QAAA;QAAA;MAAA,QAHJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAJA;EAAA,gBADJ;AAYH,CAtDD;;GAAMd,S;;KAAAA,S;AAwDN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}