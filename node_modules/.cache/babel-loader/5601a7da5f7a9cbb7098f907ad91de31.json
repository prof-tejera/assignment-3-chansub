{"ast":null,"code":"var _jsxFileName = \"/Users/steymourian/Documents/GitHub/personal/assignment-1-chansub/src/components/timers/Countdown.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport Panel from \"../generic/Panel.js\";\nimport Button from \"../generic/Button.js\"; //I took some inspiration from https://stackoverflow.com/questions/61923862/how-to-pause-a-setinterval-countdown-timer-in-react\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Countdown = () => {\n  _s();\n\n  const initialSeconds = 150;\n  const [seconds, setSeconds] = useState(initialSeconds);\n  const [pause, setPause] = useState(true);\n  useEffect(() => {\n    const interval = setInterval(performCount, 1000); //1000 millisecond = 1 second\n\n    return () => {\n      clearInterval(interval);\n    };\n  });\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = \"../utils/helpers.js\";\n    script.async = true;\n    document.body.appendChild(script);\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, []);\n\n  const performCount = () => {\n    if (!pause) {\n      if (seconds > 0) {\n        setSeconds(seconds - 1);\n        console.log('running now...', seconds);\n      }\n    }\n  };\n\n  const handlePauseToggle = () => {\n    setPause(!pause);\n    console.log(\"Countdown\", pause ? 'unpaused' : 'paused');\n  };\n\n  const handleEnd = () => {\n    setPause(true);\n    setSeconds(0);\n    console.log(\"Countdown end called\");\n  };\n\n  const handleReset = () => {\n    setPause(true);\n    setSeconds(initialSeconds);\n    console.log(\"Countdown reset called\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Panel, {\n      className: \"output\",\n      \"data-seconds\": seconds,\n      children: seconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: pause ? 'btn-start' : 'btn-pause',\n      text: pause ? 'Start' : 'Pause',\n      onClick: handlePauseToggle,\n      disabled: seconds === 0 ? true : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"btn-end\",\n      text: \"End\",\n      onClick: handleEnd,\n      disabled: seconds === 0 ? true : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"btn-reset\",\n      text: \"Reset\",\n      onClick: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Countdown, \"E8h12XwHtB47wOzMqHq9WWMLmoI=\");\n\n_c = Countdown;\nexport default Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"names":["useEffect","useState","Panel","Button","Countdown","initialSeconds","seconds","setSeconds","pause","setPause","interval","setInterval","performCount","clearInterval","script","document","createElement","src","async","body","appendChild","removeChild","console","log","handlePauseToggle","handleEnd","handleReset"],"sources":["/Users/steymourian/Documents/GitHub/personal/assignment-1-chansub/src/components/timers/Countdown.js"],"sourcesContent":["import { useEffect, useState} from \"react\";\nimport Panel from \"../generic/Panel.js\";\nimport Button from \"../generic/Button.js\";\n\n//I took some inspiration from https://stackoverflow.com/questions/61923862/how-to-pause-a-setinterval-countdown-timer-in-react\n\nconst Countdown = () => {\n\n    const initialSeconds = 150;\n\n    const [seconds, setSeconds] = useState(initialSeconds);\n    const [pause, setPause] = useState(true);\n    \n    useEffect(() => {\n        const interval = setInterval(performCount, 1000); //1000 millisecond = 1 second\n        return () => {\n            clearInterval(interval);\n        }\n    });\n\n    useEffect(() => {\n        const script = document.createElement('script');\n      \n        script.src = \"../utils/helpers.js\";\n        script.async = true;\n      \n        document.body.appendChild(script);\n      \n        return () => {\n          document.body.removeChild(script);\n        }\n    }, []);\n\n    const performCount = () => {\n        if(!pause){\n            if(seconds > 0){\n                setSeconds(seconds - 1);\n                console.log('running now...', seconds);\n            }\n        }\n    }\n\n    const handlePauseToggle = () => {\n        setPause(!pause);\n        console.log(\"Countdown\",(pause)?'unpaused':'paused');\n    }\n    const handleEnd = () => {\n        setPause(true);\n        setSeconds(0);\n        console.log(\"Countdown end called\");\n    }\n    const handleReset = () => {\n        setPause(true);\n        setSeconds(initialSeconds);\n        console.log(\"Countdown reset called\");\n    }\n    \n\n\n\n    return (\n        <>\n        <Panel className={\"output\"} data-seconds={seconds}>{seconds}</Panel>\n        <Button className={(pause)?'btn-start':'btn-pause'} text={(pause)?'Start':'Pause'} onClick={handlePauseToggle} disabled={(seconds === 0)? true:false}/>\n        <Button className='btn-end' text='End' onClick={handleEnd} disabled={(seconds === 0)? true:false}/> \n        <Button className='btn-reset' text='Reset' onClick={handleReset} />\n        </>        \n    );\n};\n\nexport default Countdown;\n"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAmC,OAAnC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB,C,CAEA;;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EAEpB,MAAMC,cAAc,GAAG,GAAvB;EAEA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAACI,cAAD,CAAtC;EACA,MAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;EAEAD,SAAS,CAAC,MAAM;IACZ,MAAMU,QAAQ,GAAGC,WAAW,CAACC,YAAD,EAAe,IAAf,CAA5B,CADY,CACsC;;IAClD,OAAO,MAAM;MACTC,aAAa,CAACH,QAAD,CAAb;IACH,CAFD;EAGH,CALQ,CAAT;EAOAV,SAAS,CAAC,MAAM;IACZ,MAAMc,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;IAEAF,MAAM,CAACG,GAAP,GAAa,qBAAb;IACAH,MAAM,CAACI,KAAP,GAAe,IAAf;IAEAH,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA0BN,MAA1B;IAEA,OAAO,MAAM;MACXC,QAAQ,CAACI,IAAT,CAAcE,WAAd,CAA0BP,MAA1B;IACD,CAFD;EAGH,CAXQ,EAWN,EAXM,CAAT;;EAaA,MAAMF,YAAY,GAAG,MAAM;IACvB,IAAG,CAACJ,KAAJ,EAAU;MACN,IAAGF,OAAO,GAAG,CAAb,EAAe;QACXC,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;QACAgB,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BjB,OAA9B;MACH;IACJ;EACJ,CAPD;;EASA,MAAMkB,iBAAiB,GAAG,MAAM;IAC5Bf,QAAQ,CAAC,CAACD,KAAF,CAAR;IACAc,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBf,KAAD,GAAQ,UAAR,GAAmB,QAA3C;EACH,CAHD;;EAIA,MAAMiB,SAAS,GAAG,MAAM;IACpBhB,QAAQ,CAAC,IAAD,CAAR;IACAF,UAAU,CAAC,CAAD,CAAV;IACAe,OAAO,CAACC,GAAR,CAAY,sBAAZ;EACH,CAJD;;EAKA,MAAMG,WAAW,GAAG,MAAM;IACtBjB,QAAQ,CAAC,IAAD,CAAR;IACAF,UAAU,CAACF,cAAD,CAAV;IACAiB,OAAO,CAACC,GAAR,CAAY,wBAAZ;EACH,CAJD;;EASA,oBACI;IAAA,wBACA,QAAC,KAAD;MAAO,SAAS,EAAE,QAAlB;MAA4B,gBAAcjB,OAA1C;MAAA,UAAoDA;IAApD;MAAA;MAAA;MAAA;IAAA,QADA,eAEA,QAAC,MAAD;MAAQ,SAAS,EAAGE,KAAD,GAAQ,WAAR,GAAoB,WAAvC;MAAoD,IAAI,EAAGA,KAAD,GAAQ,OAAR,GAAgB,OAA1E;MAAmF,OAAO,EAAEgB,iBAA5F;MAA+G,QAAQ,EAAGlB,OAAO,KAAK,CAAb,GAAiB,IAAjB,GAAsB;IAA/I;MAAA;MAAA;MAAA;IAAA,QAFA,eAGA,QAAC,MAAD;MAAQ,SAAS,EAAC,SAAlB;MAA4B,IAAI,EAAC,KAAjC;MAAuC,OAAO,EAAEmB,SAAhD;MAA2D,QAAQ,EAAGnB,OAAO,KAAK,CAAb,GAAiB,IAAjB,GAAsB;IAA3F;MAAA;MAAA;MAAA;IAAA,QAHA,eAIA,QAAC,MAAD;MAAQ,SAAS,EAAC,WAAlB;MAA8B,IAAI,EAAC,OAAnC;MAA2C,OAAO,EAAEoB;IAApD;MAAA;MAAA;MAAA;IAAA,QAJA;EAAA,gBADJ;AAQH,CA9DD;;GAAMtB,S;;KAAAA,S;AAgEN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}