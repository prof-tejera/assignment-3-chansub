{"ast":null,"code":"var _jsxFileName = \"/Users/steymourian/Documents/GitHub/personal/assignment-2-chansub/src/context/LocalTime.js\",\n    _s2 = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport { useInterval } from \"../hooks\";\nimport { AppContext } from \"./ContextProvider\";\nimport DisplayTime from \"../components/generic/DisplayTime.js\";\nimport { convertToMinSec } from \"../utils/helpers\";\nimport Button from \"../components/generic/Button\";\nimport Panel from \"../components/generic/Panel\";\nimport DisplayRounds from \"../components/generic/DisplayRounds\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Timer = _ref => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  let {\n    duration,\n    rounds,\n    index,\n    type,\n    isHome\n  } = _ref;\n  const {\n    activeIndex,\n    paused,\n    setPaused,\n    setActiveIndex,\n    removeItem,\n    queue\n  } = useContext(AppContext);\n  const [time, setTime] = useState(0);\n  const active = activeIndex === index;\n  useInterval(() => {\n    //if end has reached, reset \n    if (activeIndex === queue.length) {\n      console.log(\"End reached!\");\n      setPaused(true);\n      setActiveIndex(0);\n      setTime(0);\n      return;\n    }\n\n    if (paused || !active) return;\n\n    if (`${time}` === `${duration}`) {\n      setActiveIndex(index + 1);\n    } else {\n      setTime(c => c + 1);\n    }\n  }, 1000);\n\n  function DisplayRoundsTime() {\n    if (type === 'XY' || type === 'Tabata') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DisplayRounds, {\n          rounds: rounds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 16\n        }, this), \" \", rounds > 1 ? 'rounds' : 'round', \" x \", /*#__PURE__*/_jsxDEV(DisplayTime, {\n          label: \"\",\n          myClassName: \"noPadding\",\n          time: convertToMinSec(duration / rounds)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 82\n        }, this)]\n      }, void 0, true);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(DisplayTime, {\n          time: convertToMinSec(duration)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 16\n        }, this)\n      }, void 0, false);\n    }\n  }\n\n  function DisplayProgress() {\n    _s();\n\n    const [myActiveRound, setMyActiveRound] = useState(0);\n    if (!active) return;\n\n    if (active && type === 'Countdown') {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" (Progress: \", convertToMinSec(duration - time), \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }, this);\n    } else if (active && (type === 'XY' || type === 'Tabata')) {\n      //TODO: why won't this work? Tried to increase myActiveRound based on the progress\n      let timePerRound = duration / rounds;\n      let timeSoFar = duration - time;\n\n      if (timePerRound * myActiveRound < timeSoFar && timeSoFar < duration) {\n        setMyActiveRound(myActiveRound + 1);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" (\", myActiveRound, \" of \", rounds, \" Progress: \", convertToMinSec(time), \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" (Progress: \", convertToMinSec(time), \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }, this);\n    }\n  }\n\n  _s(DisplayProgress, \"8ZsX6VYid6RnlaCiM9wRArpSjVs=\");\n\n  return /*#__PURE__*/_jsxDEV(Panel, {\n    id: 'q' + index,\n    className: active ? \"yellowBG\" : \"whiteBG\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => removeItem(index),\n      style: {\n        display: isHome === 'no' ? 'inline-block' : 'none'\n      },\n      type: \"remove\",\n      text: \"Remove\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), type, \" - \", /*#__PURE__*/_jsxDEV(DisplayRoundsTime, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 18\n    }, this), \" \", /*#__PURE__*/_jsxDEV(DisplayProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 7\n  }, this);\n};\n\n_s2(Timer, \"JU29IEjwFWiMRB4dwF58GXOnJ2M=\", false, function () {\n  return [useInterval];\n});\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["useContext","useState","useInterval","AppContext","DisplayTime","convertToMinSec","Button","Panel","DisplayRounds","Timer","duration","rounds","index","type","isHome","activeIndex","paused","setPaused","setActiveIndex","removeItem","queue","time","setTime","active","length","console","log","c","DisplayRoundsTime","DisplayProgress","myActiveRound","setMyActiveRound","timePerRound","timeSoFar","display"],"sources":["/Users/steymourian/Documents/GitHub/personal/assignment-2-chansub/src/context/LocalTime.js"],"sourcesContent":["import { useContext, useState } from \"react\";\nimport { useInterval } from \"../hooks\";\nimport { AppContext } from \"./ContextProvider\";\n\nimport DisplayTime  from \"../components/generic/DisplayTime.js\";\nimport { convertToMinSec } from \"../utils/helpers\";\nimport Button from \"../components/generic/Button\";\nimport Panel from \"../components/generic/Panel\";\nimport DisplayRounds from \"../components/generic/DisplayRounds\";\n\nconst Timer = ({ duration, rounds, index, type, isHome }) => {\n  const { activeIndex, paused, setPaused, setActiveIndex, removeItem, queue} = useContext(AppContext);\n  const [time, setTime] = useState(0);\n  const active = activeIndex === index; \n\n  useInterval(() => {\n    //if end has reached, reset \n    if(activeIndex === queue.length){\n      console.log(\"End reached!\");\n      setPaused(true);\n      setActiveIndex(0);\n      setTime(0);\n\n      return;\n    }\n    \n    if (paused || !active) return;\n    \n    if (`${time}` === `${duration}`){\n        setActiveIndex(index + 1);\n    } \n    else {\n      setTime((c) => c + 1);\n    }\n  }, 1000);\n\n  function DisplayRoundsTime(){\n    if(type === 'XY'||(type === 'Tabata')){\n      return <><DisplayRounds rounds={rounds} /> {(rounds>1)?'rounds':'round'} x <DisplayTime label='' myClassName='noPadding' time={convertToMinSec(duration/rounds)} /></>\n    }\n    else{\n      return <><DisplayTime time={convertToMinSec(duration)}/></>\n    }\n  }\n\n  function DisplayProgress(){\n    const [myActiveRound, setMyActiveRound] = useState(0);\n\n    if(!active) return;\n\n    if(active && type === 'Countdown'){\n      return (<span> (Progress: {convertToMinSec(duration-time)})</span>)\n    }\n    else if(active && (type==='XY' || type==='Tabata')){\n \n      //TODO: why won't this work? Tried to increase myActiveRound based on the progress\n      let timePerRound = duration/rounds;\n      let timeSoFar = duration-time;  \n      \n      if((timePerRound*myActiveRound < timeSoFar) && (timeSoFar < duration)){\n         setMyActiveRound(myActiveRound+1);\n      }\n\n      return (<span> ({myActiveRound} of {rounds} Progress: {convertToMinSec(time)})</span>)\n    }\n    else{\n      return (<span> (Progress: {convertToMinSec(time)})</span>)\n    }\n  }\n \n  return (\n      <Panel id={'q'+index} className={active ? \"yellowBG\" : \"whiteBG\"}>\n        <Button onClick={() => removeItem(index)} style={{display: (isHome === 'no') ? 'inline-block' : 'none'}} type=\"remove\" text=\"Remove\"/>\n        {type} - <DisplayRoundsTime/> <DisplayProgress/>\n      </Panel>\n  );\n};\n\nexport default Timer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}